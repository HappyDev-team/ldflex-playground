{"version":3,"sources":["Header.js","Footer.js","Playground.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","lib","src","popup","Footer","href","target","Playground","state","expression","_this","props","_ref","this","setState","_ref2","value","onExpressionChange","_this2","className","onChange","e","onExpressionChanged","limit","concat","React","Component","App","savedState","webId","Header_Header","Playground_Playground","Footer_Footer","decodeURIComponent","window","location","hash","substr","_ref3","replace","encodeURIComponent","withWebId","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8f475b7f.chunk.js","sourcesContent":["import React from 'react';\nimport { LoggedIn, LoggedOut, AuthButton, Value } from '@solid/react';\nimport './Header.css';\n\nexport default function Header() {\n  return (\n    <header>\n      <h1>Solid LDflex playground</h1>\n      <p>\n        <LoggedOut>You are not logged in.</LoggedOut>\n        <LoggedIn>Welcome, <Value src=\"user.name\"/>!</LoggedIn>\n        <AuthButton popup=\"https://solid.community/.well-known/solid/login\"/>\n      </p>\n    </header>\n  );\n}\n","import React from 'react';\nimport { Label, Link } from '@solid/react';\nimport './Footer.css';\n\nexport default function Footer() {\n  return (\n    <footer>\n      <p>\n        by \n        <Link href=\"[https://ruben.verborgh.org/profile/#me].homepage\" target=\"_blank\">\n          <Label src=\"[https://ruben.verborgh.org/profile/#me]\"/>\n        </Link>.\n        Source code on \n        <a href=\"https://github.com/solid/ldflex-playground\">GitHub</a>.\n      </p>\n    </footer>\n  );\n}\n","import React from 'react';\nimport { Value, List } from '@solid/react';\nimport './Playground.css';\n\nexport default class Playground extends React.Component {\n  state = { expression: this.props.expression };\n\n  componentDidUpdate({ expression }) {\n    if (this.props.expression !== expression)\n      this.setState({ expression: this.props.expression });\n  }\n\n  onExpressionChanged({ target: { value: expression } }) {\n    this.setState({ expression });\n    if (this.props.onExpressionChange)\n      this.props.onExpressionChange(expression);\n  }\n\n  render() {\n    const { expression } = this.state;\n    return (\n      <div className=\"playground\">\n        <p className=\"expression\">\n          <label><code>solid.data</code></label>\n          <input value={expression}\n                 onChange={e => this.onExpressionChanged(e)}/>\n        </p>\n        <h3>Single result</h3>\n        <p className=\"single\"><Value src={expression}/></p>\n        <h3>Multiple results (first 10)</h3>\n        <List src={expression} limit=\"10\"/>\n        <h3>Corresponding SPARQL query</h3>\n        <pre className=\"sparql\"><code>\n          <Value src={expression && `${expression}.sparql`}/>\n        </code></pre>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport Header from './Header';\nimport Footer from './Footer';\nimport Playground from './Playground';\nimport { withWebId } from '@solid/react';\nimport './App.css';\n\nconst defaultExpression = \"['https://ruben.verborgh.org/profile/#me'].friends.firstName\";\n\nclass App extends React.Component {\n  state = this.savedState;\n\n  // Save the state in the URL fragment\n  get savedState() {\n    return { expression: decodeURIComponent(window.location.hash.substr(1)) };\n  }\n  set savedState({ expression }) {\n    window.location.replace(`#${encodeURIComponent(expression)}`);\n  }\n\n  componentDidUpdate({ webId }, { expression }) {\n    // If the user just logged in, show an example with their WebID\n    if (!this.savedState.expression && this.props.webId !== webId)\n      this.setState({ expression: `[${this.props.webId}].name` });\n    // Save the expression if it changed\n    if (this.state.expression !== expression)\n      this.savedState = this.state;\n  }\n\n  render() {\n    return (\n    <div>\n      <Header/>\n      <main>\n        <h2>\n          Write your \n          <a href=\"https://solid.github.io/query-ldflex/\">\n            Solid LDflex</a> expression\n        </h2>\n        <Playground expression={this.state.expression || defaultExpression }\n                    onExpressionChange={e => this.setState({ expression: e })}/>\n      </main>\n      <Footer/>\n    </div>\n    );\n  }\n}\nexport default withWebId(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}